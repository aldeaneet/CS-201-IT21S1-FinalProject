package RetailStore;

import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class CheckoutView {
    private JFrame frame;
    private ShoppingCart cart;
    private ProductCatalog productCatalog;
    private OrderQueue orderQueue;
    private List<Order> orderHistory;

    private static final String DB_URL = "jdbc:mysql://localhost:3306/solesociety";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "1234";

    public CheckoutView(ShoppingCart cart, ProductCatalog productCatalog, OrderQueue orderQueue, List<Order> orderHistory) {
        if (orderQueue == null) {
            throw new IllegalArgumentException("OrderQueue cannot be null");
        }

        this.cart = cart;
        this.productCatalog = productCatalog;
        this.orderQueue = orderQueue;
        this.orderHistory = orderHistory;
        initialize();
    }

    private void initialize() {
        frame = new JFrame("Checkout");
        frame.getContentPane().setBackground(new Color(226, 226, 226));
        frame.setBounds(100, 100, 600, 400);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        JLabel lblTitle = new JLabel("Checkout");
        lblTitle.setForeground(new Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
        lblTitle.setFont(new Font("Arial Rounded MT Bold", Font.BOLD, 20));
        lblTitle.setBounds(10, 10, 570, 30);
        frame.getContentPane().add(lblTitle);

        JLabel totalLabel = new JLabel("Total: $" + cart.calculateTotal());
        totalLabel.setHorizontalAlignment(SwingConstants.CENTER);
        totalLabel.setFont(new Font("Arial Rounded MT Bold", Font.PLAIN, 18));
        totalLabel.setBounds(10, 50, 570, 30);
        frame.getContentPane().add(totalLabel);

        JLabel lblPaymentMethod = new JLabel("Payment Method:");
        lblPaymentMethod.setFont(new Font("Arial", Font.PLAIN, 14));
        lblPaymentMethod.setBounds(20, 100, 150, 30);
        frame.getContentPane().add(lblPaymentMethod);

        JComboBox<String> paymentMethodComboBox = new JComboBox<>(new String[]{"Select", "GCash", "Credit/Debit Card"});
        paymentMethodComboBox.setBounds(150, 100, 200, 30);
        frame.getContentPane().add(paymentMethodComboBox);

        JLabel lblName = new JLabel("Name:");
        lblName.setFont(new Font("Arial", Font.PLAIN, 14));
        lblName.setBounds(20, 150, 150, 30);
        lblName.setVisible(false);
        frame.getContentPane().add(lblName);

        JTextField txtName = new JTextField();
        txtName.setBounds(150, 150, 200, 30);
        txtName.setVisible(false);
        frame.getContentPane().add(txtName);

        JLabel lblPhoneOrCard = new JLabel();
        lblPhoneOrCard.setFont(new Font("Arial", Font.PLAIN, 14));
        lblPhoneOrCard.setBounds(20, 200, 150, 30);
        lblPhoneOrCard.setVisible(false);
        frame.getContentPane().add(lblPhoneOrCard);

        JTextField txtPhoneOrCard = new JTextField();
        txtPhoneOrCard.setBounds(150, 200, 200, 30);
        txtPhoneOrCard.setVisible(false);
        frame.getContentPane().add(txtPhoneOrCard);

        paymentMethodComboBox.addActionListener(e -> {
            String selectedMethod = (String) paymentMethodComboBox.getSelectedItem();
            if ("GCash".equals(selectedMethod)) {
                lblName.setText("Name:");
                lblPhoneOrCard.setText("Phone Number:");
                lblName.setVisible(true);
                txtName.setVisible(true);
                lblPhoneOrCard.setVisible(true);
                txtPhoneOrCard.setVisible(true);
            } else if ("Credit/Debit Card".equals(selectedMethod)) {
                lblName.setText("Cardholder Name:");
                lblPhoneOrCard.setText("Card Number:");
                lblName.setVisible(true);
                txtName.setVisible(true);
                lblPhoneOrCard.setVisible(true);
                txtPhoneOrCard.setVisible(true);
            } else {
                lblName.setVisible(false);
                txtName.setVisible(false);
                lblPhoneOrCard.setVisible(false);
                txtPhoneOrCard.setVisible(false);
            }
        });

        JButton btnPlaceOrder = new JButton("Place Order");
        btnPlaceOrder.setBackground(new Color(169, 220, 248));
        btnPlaceOrder.setFont(new Font("Arial Rounded MT Bold", Font.PLAIN, 11));
        btnPlaceOrder.setBounds(95, 300, 150, 40);
        frame.getContentPane().add(btnPlaceOrder);

        JButton btnBack = new JButton("Back");
        btnBack.setBackground(new Color(169, 220, 248));
        btnBack.setFont(new Font("Arial Rounded MT Bold", Font.PLAIN, 11));
        btnBack.setBounds(380, 300, 150, 40);
        frame.getContentPane().add(btnBack);
        
        JPanel panel = new JPanel();
        panel.setBackground(new Color(0, 0, 0));
        panel.setBounds(0, 0, 588, 40);
        frame.getContentPane().add(panel);

        btnPlaceOrder.addActionListener(e -> {
            if (cart.getItems().isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Your cart is empty. Add items to checkout.");
                return;
            }

            String selectedMethod = (String) paymentMethodComboBox.getSelectedItem();
            if ("Select".equals(selectedMethod) || selectedMethod == null) {
                JOptionPane.showMessageDialog(frame, "Please select a payment method.");
                return;
            }

            String name = txtName.getText();
            String phoneOrCard = txtPhoneOrCard.getText();
            if (name.isEmpty() || phoneOrCard.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Please fill in the required payment details.");
                return;
            }

            if ("GCash".equals(selectedMethod) && !isValidPhoneNumber(phoneOrCard)) {
                JOptionPane.showMessageDialog(frame, "Invalid phone number.");
                return;
            }

            if ("Credit/Debit Card".equals(selectedMethod)) {
                if (!isValidCreditCard(phoneOrCard)) {
                    JOptionPane.showMessageDialog(frame, "Invalid credit card number.");
                    return;
                }
            }

            boolean stockAvailable = true;
            for (CartItem item : cart.getItems()) {
                Product product = productCatalog.getProduct(item.getProductId());
                if (product.getStock() < item.getQuantity()) {
                    JOptionPane.showMessageDialog(frame, "Insufficient stock for: " + product.getName());
                    stockAvailable = false;
                    break;
                }
            }

            if (stockAvailable) {
                String orderId = "ORD" + System.currentTimeMillis();
                String orderDate = getCurrentDateTime();
                int customerId = UserSession.getCurrentUser().getId();
                double totalAmount = cart.calculateTotal();
                String status = "Completed";
                String gcashName = "GCash".equals(selectedMethod) ? name : null;
                String gcashPhoneNumber = "GCash".equals(selectedMethod) ? phoneOrCard : null;
                String cardholderName = "Credit/Debit Card".equals(selectedMethod) ? name : null;
                String cardNumber = "Credit/Debit Card".equals(selectedMethod) ? phoneOrCard : null;

                insertOrderIntoDatabase(orderId, customerId, orderDate, totalAmount, status, selectedMethod, gcashName, gcashPhoneNumber, cardholderName, cardNumber);
                updateProductStockInDatabase();

                cart.getItems().clear();

                JOptionPane.showMessageDialog(frame, "Order placed successfully!");
                frame.dispose();
            }
        });

        btnBack.addActionListener(e -> frame.dispose());
    }

    private void insertOrderIntoDatabase(String orderId, int customerId, String orderDate, double totalAmount, String status, String paymentMethod, 
            String gcashName, String gcashPhoneNumber, String cardholderName, String cardNumber) {
				try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
				
				StringBuilder productsString = new StringBuilder();
				for (CartItem item : cart.getItems()) {
					Product product = productCatalog.getProduct(item.getProductId());
					if (productsString.length() > 0) {
						productsString.append(", "); 
				}
	productsString.append(product.getProductId()).append(": ").append(item.getQuantity());
	}

	String orderQuery = "INSERT INTO orderhistory (orderId, customerId, orderDate, totalAmount, status, paymentMethod, products, gcashName, gcashPhoneNumber, cardholderName, cardNumber) " +
	   "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try (PreparedStatement orderStmt = connection.prepareStatement(orderQuery)) {
			orderStmt.setString(1, orderId);
			orderStmt.setInt(2, customerId);
			orderStmt.setString(3, orderDate);
			orderStmt.setDouble(4, totalAmount);
			orderStmt.setString(5, status);
			orderStmt.setString(6, paymentMethod);
			orderStmt.setString(7, productsString.toString());
			orderStmt.setString(8, gcashName);
			orderStmt.setString(9, gcashPhoneNumber);
			orderStmt.setString(10, cardholderName);
			orderStmt.setString(11, cardNumber);
			orderStmt.executeUpdate();
					}
				} 
		catch (SQLException e) {
	JOptionPane.showMessageDialog(frame, "Error placing order in database: " + e.getMessage());
		}
	}


    private void updateProductStockInDatabase() {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            for (CartItem item : cart.getItems()) {
                String productQuery = "UPDATE products SET stock = stock - ? WHERE product_id = ?";
                try (PreparedStatement productStmt = connection.prepareStatement(productQuery)) {
                    productStmt.setInt(1, item.getQuantity());
                    productStmt.setString(2, item.getProductId());
                    productStmt.executeUpdate();
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(frame, "Error updating product stock in database: " + e.getMessage());
        }
    }

    private boolean isValidPhoneNumber(String phoneNumber) {
        if (phoneNumber.startsWith("09") && phoneNumber.length() == 11) {
            return true;
        }
        if (phoneNumber.startsWith("63") && phoneNumber.length() == 12 && phoneNumber.charAt(2) == '9') {
            return true;
        }
        return false;
    }

    private boolean isValidCreditCard(String cardNumber) {
        return cardNumber.length() == 16 && cardNumber.matches("\\d+");
    }

    private String getCurrentDateTime() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return LocalDateTime.now().format(formatter);
    }

    public void display() {
        frame.setVisible(true);
    }
}
